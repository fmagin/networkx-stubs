# Stubs for networkx.generators.random_graphs (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def fast_gnp_random_graph(
    n: Incomplete, p: Incomplete, seed: Incomplete | None = ..., directed: bool = ...
) -> Incomplete: ...
def gnp_random_graph(
    n: Incomplete, p: Incomplete, seed: Incomplete | None = ..., directed: bool = ...
) -> Incomplete: ...

binomial_graph = gnp_random_graph
erdos_renyi_graph = gnp_random_graph

def dense_gnm_random_graph(
    n: Incomplete, m: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def gnm_random_graph(
    n: Incomplete, m: Incomplete, seed: Incomplete | None = ..., directed: bool = ...
) -> Incomplete: ...
def newman_watts_strogatz_graph(
    n: Incomplete, k: Incomplete, p: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def watts_strogatz_graph(
    n: Incomplete, k: Incomplete, p: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def connected_watts_strogatz_graph(
    n: Incomplete,
    k: Incomplete,
    p: Incomplete,
    tries: int = ...,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
def random_regular_graph(
    d: Incomplete, n: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def barabasi_albert_graph(
    n: Incomplete, m: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def dual_barabasi_albert_graph(
    n: Incomplete,
    m1: Incomplete,
    m2: Incomplete,
    p: Incomplete,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
def extended_barabasi_albert_graph(
    n: Incomplete,
    m: Incomplete,
    p: Incomplete,
    q: Incomplete,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
def powerlaw_cluster_graph(
    n: Incomplete, m: Incomplete, p: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def random_lobster(
    n: Incomplete, p1: Incomplete, p2: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def random_shell_graph(
    constructor: Incomplete, seed: Incomplete | None = ...
) -> Incomplete: ...
def random_powerlaw_tree(
    n: Incomplete, gamma: int = ..., seed: Incomplete | None = ..., tries: int = ...
) -> Incomplete: ...
def random_powerlaw_tree_sequence(
    n: Incomplete, gamma: int = ..., seed: Incomplete | None = ..., tries: int = ...
) -> Incomplete: ...
def random_kernel_graph(
    n: Incomplete,
    kernel_integral: Incomplete,
    kernel_root: Incomplete | None = ...,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
