# Stubs for networkx.generators.degree_seq (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from _typeshed import Incomplete

def configuration_model(
    deg_sequence: Any, create_using: Any | None = ..., seed: Any | None = ...
) -> Incomplete: ...
def directed_configuration_model(
    in_degree_sequence: Any,
    out_degree_sequence: Any,
    create_using: Any | None = ...,
    seed: Any | None = ...,
) -> Incomplete: ...
def expected_degree_graph(
    w: Any, seed: Any | None = ..., selfloops: bool = ...
) -> Incomplete: ...
def havel_hakimi_graph(
    deg_sequence: Any, create_using: Any | None = ...
) -> Incomplete: ...
def directed_havel_hakimi_graph(
    in_deg_sequence: Any, out_deg_sequence: Any, create_using: Any | None = ...
) -> Incomplete: ...
def degree_sequence_tree(
    deg_sequence: Any, create_using: Any | None = ...
) -> Incomplete: ...
def random_degree_sequence_graph(
    sequence: Any, seed: Any | None = ..., tries: int = ...
) -> Incomplete: ...

class DegreeSequenceRandomGraph:
    rng: Any = ...
    degree: Any = ...
    m: Any = ...
    dmax: Any = ...
    def __init__(self, degree: Any, rng: Any) -> None: ...
    remaining_degree: Any = ...
    graph: Any = ...
    def generate(self) -> Incomplete: ...
    def update_remaining(self, u: Any, v: Any, aux_graph: Any | None = ...) -> None: ...
    def p(self, u: Any, v: Any) -> Incomplete: ...
    def q(self, u: Any, v: Any) -> Incomplete: ...
    def suitable_edge(self) -> Incomplete: ...
    def phase1(self) -> None: ...
    def phase2(self) -> None: ...
    def phase3(self) -> None: ...
