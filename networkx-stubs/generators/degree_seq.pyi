# Stubs for networkx.generators.degree_seq (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def configuration_model(
    deg_sequence: Incomplete,
    create_using: Incomplete | None = ...,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
def directed_configuration_model(
    in_degree_sequence: Incomplete,
    out_degree_sequence: Incomplete,
    create_using: Incomplete | None = ...,
    seed: Incomplete | None = ...,
) -> Incomplete: ...
def expected_degree_graph(
    w: Incomplete, seed: Incomplete | None = ..., selfloops: bool = ...
) -> Incomplete: ...
def havel_hakimi_graph(
    deg_sequence: Incomplete, create_using: Incomplete | None = ...
) -> Incomplete: ...
def directed_havel_hakimi_graph(
    in_deg_sequence: Incomplete,
    out_deg_sequence: Incomplete,
    create_using: Incomplete | None = ...,
) -> Incomplete: ...
def degree_sequence_tree(
    deg_sequence: Incomplete, create_using: Incomplete | None = ...
) -> Incomplete: ...
def random_degree_sequence_graph(
    sequence: Incomplete, seed: Incomplete | None = ..., tries: int = ...
) -> Incomplete: ...

class DegreeSequenceRandomGraph:
    rng: Incomplete = ...
    degree: Incomplete = ...
    m: Incomplete = ...
    dmax: Incomplete = ...
    def __init__(self, degree: Incomplete, rng: Incomplete) -> None: ...
    remaining_degree: Incomplete = ...
    graph: Incomplete = ...
    def generate(self) -> Incomplete: ...
    def update_remaining(
        self, u: Incomplete, v: Incomplete, aux_graph: Incomplete | None = ...
    ) -> None: ...
    def p(self, u: Incomplete, v: Incomplete) -> Incomplete: ...
    def q(self, u: Incomplete, v: Incomplete) -> Incomplete: ...
    def suitable_edge(self) -> Incomplete: ...
    def phase1(self) -> None: ...
    def phase2(self) -> None: ...
    def phase3(self) -> None: ...
