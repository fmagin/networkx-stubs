# Stubs for networkx.utils.heaps (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

class MinHeap:
    class _Item:
        key: Incomplete = ...
        value: Incomplete = ...
        def __init__(self, key: Incomplete, value: Incomplete) -> None: ...

    def __init__(self) -> None: ...
    def min(self) -> None: ...
    def pop(self) -> None: ...
    def get(self, key: Incomplete, default: Incomplete | None = ...) -> None: ...
    def insert(
        self, key: Incomplete, value: Incomplete, allow_increase: bool = ...
    ) -> None: ...
    def __nonzero__(self) -> Incomplete: ...
    def __bool__(self) -> Incomplete: ...
    def __len__(self) -> Incomplete: ...
    def __contains__(self, key: Incomplete) -> Incomplete: ...

class PairingHeap(MinHeap):
    class _Node(MinHeap._Item):
        left: Incomplete = ...
        next: Incomplete = ...
        prev: Incomplete = ...
        parent: Incomplete = ...
        def __init__(self, key: Incomplete, value: Incomplete) -> None: ...

    def __init__(self) -> None: ...
    def min(self) -> Incomplete: ...
    def pop(self) -> Incomplete: ...
    def get(self, key: Incomplete, default: Incomplete | None = ...) -> Incomplete: ...
    def insert(
        self, key: Incomplete, value: Incomplete, allow_increase: bool = ...
    ) -> Incomplete: ...

class BinaryHeap(MinHeap):
    def __init__(self) -> None: ...
    def min(self) -> Incomplete: ...
    def pop(self) -> Incomplete: ...
    def get(self, key: Incomplete, default: Incomplete | None = ...) -> Incomplete: ...
    def insert(
        self, key: Incomplete, value: Incomplete, allow_increase: bool = ...
    ) -> Incomplete: ...
