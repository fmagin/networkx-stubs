# Stubs for networkx.utils.misc (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

basestring = str
unicode = str

def is_string_like(obj: Incomplete) -> Incomplete: ...
def iterable(obj: Incomplete) -> Incomplete: ...
def flatten(obj: Incomplete, result: Incomplete | None = ...) -> Incomplete: ...
def is_list_of_ints(intlist: Incomplete) -> Incomplete: ...

PY2: Incomplete

def make_str(x: Incomplete) -> Incomplete: ...
def generate_unique_node() -> Incomplete: ...
def default_opener(filename: Incomplete) -> None: ...
def dict_to_numpy_array(
    d: Incomplete, mapping: Incomplete | None = ...
) -> Incomplete: ...
def dict_to_numpy_array2(
    d: Incomplete, mapping: Incomplete | None = ...
) -> Incomplete: ...
def dict_to_numpy_array1(
    d: Incomplete, mapping: Incomplete | None = ...
) -> Incomplete: ...
def is_iterator(obj: Incomplete) -> Incomplete: ...
def arbitrary_element(iterable: Incomplete) -> Incomplete: ...
def consume(iterator: Incomplete) -> None: ...
def pairwise(iterable: Incomplete, cyclic: bool = ...) -> Incomplete: ...
def groups(many_to_one: Incomplete) -> Incomplete: ...
def to_tuple(x: Incomplete) -> Incomplete: ...
def create_random_state(random_state: Incomplete | None = ...) -> Incomplete: ...

class PythonRandomInterface:
    def __init__(self, rng: Incomplete | None = ...) -> None: ...
    msg: str = ...
    def random(self) -> Incomplete: ...
    def uniform(self, a: Incomplete, b: Incomplete) -> Incomplete: ...
    def randrange(self, a: Incomplete, b: Incomplete | None = ...) -> Incomplete: ...
    def choice(self, seq: Incomplete) -> Incomplete: ...
    def gauss(self, mu: Incomplete, sigma: Incomplete) -> Incomplete: ...
    def shuffle(self, seq: Incomplete) -> Incomplete: ...
    def sample(self, seq: Incomplete, k: Incomplete) -> Incomplete: ...
    def randint(self, a: Incomplete, b: Incomplete) -> Incomplete: ...
    def expovariate(self, scale: Incomplete) -> Incomplete: ...
    def paretovariate(self, shape: Incomplete) -> Incomplete: ...

def create_py_random_state(random_state: Incomplete | None = ...) -> Incomplete: ...
def setup_module(module: Incomplete) -> None: ...
