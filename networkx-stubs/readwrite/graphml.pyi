# Stubs for networkx.readwrite.graphml (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def write_graphml_xml(
    G: Incomplete,
    path: Incomplete,
    encoding: str = ...,
    prettyprint: bool = ...,
    infer_numeric_types: bool = ...,
) -> None: ...
def write_graphml_lxml(
    G: Incomplete,
    path: Incomplete,
    encoding: str = ...,
    prettyprint: bool = ...,
    infer_numeric_types: bool = ...,
) -> None: ...
def generate_graphml(
    G: Incomplete, encoding: str = ..., prettyprint: bool = ...
) -> None: ...
def read_graphml(
    path: Incomplete, node_type: Incomplete = ..., edge_key_type: Incomplete = ...
) -> Incomplete: ...
def parse_graphml(
    graphml_string: Incomplete, node_type: Incomplete = ...
) -> Incomplete: ...

class GraphML:
    NS_GRAPHML: str = ...
    NS_XSI: str = ...
    NS_Y: str = ...
    SCHEMALOCATION: Incomplete = ...
    unicode: Incomplete = ...
    long: Incomplete = ...
    types: Incomplete = ...
    xml_type: Incomplete = ...
    python_type: Incomplete = ...
    convert_bool: Incomplete = ...

class GraphMLWriter(GraphML):
    myElement: Incomplete = ...
    infer_numeric_types: Incomplete = ...
    prettyprint: Incomplete = ...
    encoding: Incomplete = ...
    xml: Incomplete = ...
    keys: Incomplete = ...
    attributes: Incomplete = ...
    attribute_types: Incomplete = ...
    def __init__(
        self,
        graph: Incomplete | None = ...,
        encoding: str = ...,
        prettyprint: bool = ...,
        infer_numeric_types: bool = ...,
    ) -> None: ...
    def attr_type(
        self, name: Incomplete, scope: Incomplete, value: Incomplete
    ) -> Incomplete: ...
    def get_key(
        self,
        name: Incomplete,
        attr_type: Incomplete,
        scope: Incomplete,
        default: Incomplete,
    ) -> Incomplete: ...
    def add_data(
        self,
        name: Incomplete,
        element_type: Incomplete,
        value: Incomplete,
        scope: str = ...,
        default: Incomplete | None = ...,
    ) -> Incomplete: ...
    def add_attributes(
        self,
        scope: Incomplete,
        xml_obj: Incomplete,
        data: Incomplete,
        default: Incomplete,
    ) -> None: ...
    def add_nodes(self, G: Incomplete, graph_element: Incomplete) -> None: ...
    def add_edges(self, G: Incomplete, graph_element: Incomplete) -> None: ...
    def add_graph_element(self, G: Incomplete) -> None: ...
    def add_graphs(self, graph_list: Incomplete) -> None: ...
    def dump(self, stream: Incomplete) -> None: ...
    def indent(self, elem: Incomplete, level: int = ...) -> None: ...

class IncrementalElement:
    xml: Incomplete = ...
    prettyprint: Incomplete = ...
    def __init__(self, xml: Incomplete, prettyprint: Incomplete) -> None: ...
    def append(self, element: Incomplete) -> None: ...

class GraphMLWriterLxml(GraphMLWriter):
    myElement: Incomplete = ...
    infer_numeric_types: Incomplete = ...
    xml: Incomplete = ...
    keys: Incomplete = ...
    attribute_types: Incomplete = ...
    def __init__(
        self,
        path: Incomplete,
        graph: Incomplete | None = ...,
        encoding: str = ...,
        prettyprint: bool = ...,
        infer_numeric_types: bool = ...,
    ) -> None: ...
    def add_graph_element(self, G: Incomplete) -> None: ...
    def add_attributes(
        self,
        scope: Incomplete,
        xml_obj: Incomplete,
        data: Incomplete,
        default: Incomplete,
    ) -> None: ...
    def dump(self, stream: Incomplete) -> None: ...

write_graphml = write_graphml_xml
write_graphml = write_graphml_lxml

class GraphMLReader(GraphML):
    node_type: Incomplete = ...
    edge_key_type: Incomplete = ...
    multigraph: bool = ...
    edge_ids: Incomplete = ...
    def __init__(
        self, node_type: Incomplete = ..., edge_key_type: Incomplete = ...
    ) -> None: ...
    xml: Incomplete = ...
    def __call__(
        self, path: Incomplete | None = ..., string: Incomplete | None = ...
    ) -> None: ...
    def make_graph(
        self,
        graph_xml: Incomplete,
        graphml_keys: Incomplete,
        defaults: Incomplete,
        G: Incomplete | None = ...,
    ) -> Incomplete: ...
    def add_node(
        self,
        G: Incomplete,
        node_xml: Incomplete,
        graphml_keys: Incomplete,
        defaults: Incomplete,
    ) -> None: ...
    def add_edge(
        self, G: Incomplete, edge_element: Incomplete, graphml_keys: Incomplete
    ) -> None: ...
    def decode_data_elements(
        self, graphml_keys: Incomplete, obj_xml: Incomplete
    ) -> Incomplete: ...
    def find_graphml_keys(self, graph_element: Incomplete) -> Incomplete: ...
