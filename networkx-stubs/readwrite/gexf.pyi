# Stubs for networkx.readwrite.gexf (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def write_gexf(
    G: Incomplete,
    path: Incomplete,
    encoding: str = ...,
    prettyprint: bool = ...,
    version: str = ...,
) -> None: ...
def generate_gexf(
    G: Incomplete, encoding: str = ..., prettyprint: bool = ..., version: str = ...
) -> None: ...
def read_gexf(
    path: Incomplete,
    node_type: Incomplete | None = ...,
    relabel: bool = ...,
    version: str = ...,
) -> Incomplete: ...

class GEXF:
    versions: Incomplete = ...
    d: Incomplete = ...
    types: Incomplete = ...
    xml_type: Incomplete = ...
    python_type: Incomplete = ...
    convert_bool: Incomplete = ...
    NS_GEXF: Incomplete = ...
    NS_VIZ: Incomplete = ...
    NS_XSI: Incomplete = ...
    SCHEMALOCATION: Incomplete = ...
    VERSION: Incomplete = ...
    version: Incomplete = ...
    def set_version(self, version: Incomplete) -> None: ...

class GEXFWriter(GEXF):
    prettyprint: Incomplete = ...
    encoding: Incomplete = ...
    xml: Incomplete = ...
    edge_id: Incomplete = ...
    attr_id: Incomplete = ...
    all_edge_ids: Incomplete = ...
    attr: Incomplete = ...
    def __init__(
        self,
        graph: Incomplete | None = ...,
        encoding: str = ...,
        prettyprint: bool = ...,
        version: str = ...,
    ) -> None: ...
    graph_element: Incomplete = ...
    def add_graph(self, G: Incomplete) -> None: ...
    def add_meta(self, G: Incomplete, graph_element: Incomplete) -> None: ...
    def add_nodes(self, G: Incomplete, graph_element: Incomplete) -> None: ...
    def add_edges(self, G: Incomplete, graph_element: Incomplete) -> None: ...
    def add_attributes(
        self,
        node_or_edge: Incomplete,
        xml_obj: Incomplete,
        data: Incomplete,
        default: Incomplete,
    ) -> Incomplete: ...
    def get_attr_id(
        self,
        title: Incomplete,
        attr_type: Incomplete,
        edge_or_node: Incomplete,
        default: Incomplete,
        mode: Incomplete,
    ) -> Incomplete: ...
    def add_viz(self, element: Incomplete, node_data: Incomplete) -> Incomplete: ...
    def add_parents(
        self, node_element: Incomplete, node_data: Incomplete
    ) -> Incomplete: ...
    def add_slices(
        self, node_or_edge_element: Incomplete, node_or_edge_data: Incomplete
    ) -> Incomplete: ...
    def add_spells(
        self, node_or_edge_element: Incomplete, node_or_edge_data: Incomplete
    ) -> Incomplete: ...
    def alter_graph_mode_timeformat(self, start_or_end: Incomplete) -> None: ...
    def write(self, fh: Incomplete) -> None: ...
    def indent(self, elem: Incomplete, level: int = ...) -> None: ...

class GEXFReader(GEXF):
    node_type: Incomplete = ...
    simple_graph: bool = ...
    def __init__(
        self, node_type: Incomplete | None = ..., version: str = ...
    ) -> None: ...
    xml: Incomplete = ...
    def __call__(self, stream: Incomplete) -> Incomplete: ...
    timeformat: Incomplete = ...
    def make_graph(self, graph_xml: Incomplete) -> Incomplete: ...
    def add_node(
        self,
        G: Incomplete,
        node_xml: Incomplete,
        node_attr: Incomplete,
        node_pid: Incomplete | None = ...,
    ) -> None: ...
    def add_start_end(self, data: Incomplete, xml: Incomplete) -> Incomplete: ...
    def add_viz(self, data: Incomplete, node_xml: Incomplete) -> Incomplete: ...
    def add_parents(self, data: Incomplete, node_xml: Incomplete) -> Incomplete: ...
    def add_slices(
        self, data: Incomplete, node_or_edge_xml: Incomplete
    ) -> Incomplete: ...
    def add_spells(
        self, data: Incomplete, node_or_edge_xml: Incomplete
    ) -> Incomplete: ...
    def add_edge(
        self, G: Incomplete, edge_element: Incomplete, edge_attr: Incomplete
    ) -> None: ...
    def decode_attr_elements(
        self, gexf_keys: Incomplete, obj_xml: Incomplete
    ) -> Incomplete: ...
    def find_gexf_attributes(self, attributes_element: Incomplete) -> Incomplete: ...

def relabel_gexf_graph(G: Incomplete) -> Incomplete: ...
