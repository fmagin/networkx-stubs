from typing import Any, Generic, Iterator, Mapping, TypeVar
from _typeshed import Self

_T = TypeVar("_T")
_U = TypeVar("_U")
_V = TypeVar("_V")

class AtlasView(Mapping[_T, dict[_U, _V]], Generic[_T, _U, _V]):
    def __init__(self, d: Mapping[_T, dict[_U, _V]]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __getitem__(self, key: _T) -> dict[_U, _V]: ...
    def copy(self: Self) -> Self: ...

class AdjacencyView(AtlasView[_T, _U, _V], Generic[_T, _U, _V]): ...
class MultiAdjacencyView(AdjacencyView[_T, _U, _V], Generic[_T, _U, _V]): ...

class UnionAtlas(Mapping[_T, dict[_U, _V]], Generic[_T, _U, _V]):
    def __init__(self, succ: AtlasView[_T, _U, _V], pred: AtlasView[_T, _U, _V]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __getitem__(self, key: _T) -> dict[_U, _V]: ...
    def copy(self: Self) -> Self: ...

class UnionAdjacency(Mapping[_T, dict[_U, _V]], Generic[_T, _U, _V]):
    def __init__(self, succ: AdjacencyView[_T, _U, _V], pred: AdjacencyView[_T, _U, _V]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __getitem__(self, key: _T) -> dict[_U, _V]: ...
    def copy(self: Self) -> Self: ...

class UnionMultiInner(UnionAtlas):
    def __getitem__(self, node: Any): ...
    def copy(self): ...

class UnionMultiAdjacency(UnionAdjacency):
    def __getitem__(self, node: Any): ...

class FilterAtlas(Mapping):
    NODE_OK: Any = ...
    def __init__(self, d: Any, NODE_OK: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, key: Any): ...
    def copy(self): ...

class FilterAdjacency(Mapping):
    NODE_OK: Any = ...
    EDGE_OK: Any = ...
    def __init__(self, d: Any, NODE_OK: Any, EDGE_OK: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __getitem__(self, node: Any): ...
    def copy(self): ...

class FilterMultiInner(FilterAdjacency):
    def __iter__(self): ...
    def __getitem__(self, nbr: Any): ...
    def copy(self): ...

class FilterMultiAdjacency(FilterAdjacency):
    def __getitem__(self, node: Any): ...
    def copy(self): ...
