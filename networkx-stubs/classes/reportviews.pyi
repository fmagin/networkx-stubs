# Stubs for networkx.classes.reportviews (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections.abc import Mapping, Set
from typing import Iterator, Iterable, Tuple, Generic, Mapping, Dict, Any, Tuple, Optional, TypeVar, Hashable, overload, Literal
from networkx.classes.graph import Graph, Edge, Node, NBunch

class NodeView(Generic[Node]):
    def __init__(self, graph: Graph[Node]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Node]: ...
    def __getitem__(self, n: Node) -> Node: ...
    def __contains__(self, n: object) -> bool: ...
    @overload
    def __call__(self, data: Literal[False] = ..., default: Any = ...) -> NodeView[Node]: ...
    @overload
    def __call__(self, data: Literal[True] | str = ..., default: Any = ...) -> NodeDataView[Node]: ...
    def data(self, data: bool | str = ..., default: Any = ...) -> NodeDataView[Node]: ...

class NodeDataView(Generic[Node]):
    def __init__(
        self,
        nodedict: Dict[str, Any],
        data: bool | str = ...,
        default: Any = ...,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Tuple[Node, Any]]: ...
    def __contains__(self, n: Node) -> bool: ...
    def __getitem__(self, n: Node) -> Any: ...

class DiDegreeView(Generic[Node]):
    def __init__(
        self,
        G: Graph[Node],
        nbunch: NBunch[Node] = ...,
        weight: None | bool | str = ...,
    ) -> None: ...
    def __call__( self, nbunch: NBunch[Node] = ..., weight: None | bool | str = ...) -> DiDegreeView[Node]: ...
    def __getitem__(self, n: Node) -> int | float: ...
    def __iter__(self) -> Iterator[Tuple[Node, int | float]]: ...
    def __len__(self) -> int: ...

class DegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class OutDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class InDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class MultiDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class DiMultiDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class InMultiDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class OutMultiDegreeView(DiDegreeView[Node], Generic[Node]):
    ...

class OutEdgeDataView(Generic[Node]):
    def __init__(
        self,
        viewer: Any,
        nbunch: NBunch[Node] = ...,
        data: bool | str = ...,
        default: Any = ...,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Tuple[Node, Node, Any]]: ...
    def __contains__(self, e: Edge[Node]) -> bool: ...

class EdgeDataView(OutEdgeDataView[Node], Generic[Node]):
    ...

class InEdgeDataView(OutEdgeDataView[Node], Generic[Node]):
    ...

class OutMultiEdgeDataView(OutEdgeDataView[Node], Generic[Node]):
    ...

class MultiEdgeDataView(OutEdgeDataView[Node], Generic[Node]):
    ...

class InMultiEdgeDataView(OutEdgeDataView[Node], Generic[Node]):
    ...

class OutEdgeView(Generic[Node]):
    def __init__(self, graph: Graph[Node]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Tuple[Node, Node]]: ...
    def __contains__(self, e: Edge[Node]) -> bool: ...
    def __getitem__(self, e: Edge[Node]) -> Dict[str, Any]: ...
    @overload
    def __call__(self, nbunch: NBunch[Node] = ..., data: Literal[True] = ..., default: Any = ...) -> OutEdgeDataView[Node]: ...
    @overload
    def __call__(self, nbunch: NBunch[Node] = ..., data: bool | str = ..., default: Any = ...) -> OutEdgeView[Node]: ...
    def data(self, data: bool | str = ..., default: Any = ..., nbunch: NBunch[Node] = ...) -> OutEdgeDataView[Node]: ...

class EdgeView(OutEdgeView[Node], Generic[Node]):
    ...

class InEdgeView(OutEdgeView[Node], Generic[Node]):
    ...

class OutMultiEdgeView(OutEdgeView[Node], Generic[Node]):
    ...

class MultiEdgeView(OutMultiEdgeView[Node], Generic[Node]):
    ...

class InMultiEdgeView(OutMultiEdgeView[Node], Generic[Node]):
    ...
