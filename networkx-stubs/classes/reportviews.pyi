from typing import Any, Generic, Iterator, Literal, overload, TypeVar

from networkx.classes.graph import Edge, Graph, NBunch, Node

_D = TypeVar("_D")
_U = TypeVar("_U")

class NodeView(Generic[Node]):
    def __init__(self, graph: Graph[Node]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Node]: ...
    def __getitem__(self, n: Node) -> Node: ...
    def __contains__(self, n: object) -> bool: ...
    @overload
    def __call__(self, data: Literal[False] = ..., default: Any = ...) -> NodeView[Node]: ...
    @overload
    def __call__(self, data: Literal[True] | str, default: Any = ...) -> NodeDataView[Node]: ...
    def data(self, data: bool | str = ..., default: Any = ...) -> NodeDataView[Node]: ...

class NodeDataView(Generic[Node]):
    def __init__(self, nodedict: dict[str, Any], data: bool | str = ..., default: Any = ...) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[tuple[Node, Any]]: ...
    def __contains__(self, n: Node) -> bool: ...
    def __getitem__(self, n: Node) -> Any: ...

class DiDegreeView(Generic[Node]):
    def __init__(self, G: Graph[Node], nbunch: NBunch[Node] = ..., weight: None | bool | str = ...) -> None: ...
    def __call__(self, nbunch: NBunch[Node] = ..., weight: None | bool | str = ...) -> DiDegreeView[Node]: ...
    def __getitem__(self, n: Node) -> int | float: ...
    def __iter__(self) -> Iterator[tuple[Node, int | float]]: ...
    def __len__(self) -> int: ...

class DegreeView(DiDegreeView[Node], Generic[Node]): ...
class OutDegreeView(DiDegreeView[Node], Generic[Node]): ...
class InDegreeView(DiDegreeView[Node], Generic[Node]): ...
class MultiDegreeView(DiDegreeView[Node], Generic[Node]): ...
class DiMultiDegreeView(DiDegreeView[Node], Generic[Node]): ...
class InMultiDegreeView(DiDegreeView[Node], Generic[Node]): ...
class OutMultiDegreeView(DiDegreeView[Node], Generic[Node]): ...

class OutEdgeDataView(Generic[Node, _D]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_D]: ...
    def __contains__(self, e: Edge[Node]) -> bool: ...

class EdgeDataView(OutEdgeDataView[Node, _D], Generic[Node, _D]): ...
class InEdgeDataView(OutEdgeDataView[Node, _D], Generic[Node, _D]): ...
class OutMultiEdgeDataView(OutEdgeDataView[Node, _D], Generic[Node, _D]): ...
class MultiEdgeDataView(OutEdgeDataView[Node, _D], Generic[Node, _D]): ...
class InMultiEdgeDataView(OutEdgeDataView[Node, _D], Generic[Node, _D]): ...

class OutEdgeView(Generic[Node]):
    def __init__(self, graph: Graph[Node]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[tuple[Node, Node]]: ...
    def __contains__(self, e: Edge[Node]) -> bool: ...
    def __getitem__(self, e: Edge[Node]) -> dict[str, Any]: ...
    @overload
    def __call__(self, nbunch: NBunch[Node] = ..., data: Literal[False] = ..., default: Any = ...) -> OutEdgeView[Node]: ...
    @overload
    def __call__(self, *, nbunch: NBunch[Node] = ..., data: Literal[True], default: Any = ...) -> OutEdgeDataView[Node, tuple[Node, Node, dict[str, Any]]]: ...
    @overload
    def __call__(self, nbunch: NBunch[Node] = ..., data: str = ..., default: _U = None) -> OutEdgeDataView[Node, tuple[Node, Node, _U]]: ...
    @overload
    def data(self, data: Literal[False] = False, default: Any = ..., nbunch: NBunch[Node] = ...) -> OutEdgeView[Node]: ...
    @overload
    def data(self, data: Literal[True] = True, default: Any = ..., nbunch: NBunch[Node] = ...) -> OutEdgeDataView[Node, tuple[Node, Node, dict[str, Any]]]: ...
    @overload
    def data(self, data: str = ..., default: _U = None, nbunch: NBunch[Node] = ...) -> OutEdgeDataView[Node, tuple[Node, Node, _U]]: ...

class EdgeView(OutEdgeView[Node], Generic[Node]): ...
class InEdgeView(OutEdgeView[Node], Generic[Node]): ...
class OutMultiEdgeView(OutEdgeView[Node], Generic[Node]): ...
class MultiEdgeView(OutMultiEdgeView[Node], Generic[Node]): ...
class InMultiEdgeView(OutMultiEdgeView[Node], Generic[Node]): ...
