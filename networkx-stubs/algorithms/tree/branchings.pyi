# Stubs for networkx.algorithms.tree.branchings (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

from .recognition import *

def branching_weight(
    G: Incomplete, attr: str = ..., default: int = ...
) -> Incomplete: ...
def greedy_branching(
    G: Incomplete,
    attr: str = ...,
    default: int = ...,
    kind: str = ...,
    seed: Incomplete | None = ...,
) -> Incomplete: ...

class Edmonds:
    G_original: Incomplete = ...
    store: bool = ...
    edges: Incomplete = ...
    template: Incomplete = ...
    def __init__(self, G: Incomplete, seed: Incomplete | None = ...) -> None: ...
    def find_optimum(
        self,
        attr: str = ...,
        default: int = ...,
        kind: str = ...,
        style: str = ...,
        preserve_attrs: bool = ...,
        seed: Incomplete | None = ...,
    ) -> Incomplete: ...

def maximum_branching(
    G: Incomplete, attr: str = ..., default: int = ..., preserve_attrs: bool = ...
) -> Incomplete: ...
def minimum_branching(
    G: Incomplete, attr: str = ..., default: int = ..., preserve_attrs: bool = ...
) -> Incomplete: ...
def maximum_spanning_arborescence(
    G: Incomplete, attr: str = ..., default: int = ..., preserve_attrs: bool = ...
) -> Incomplete: ...
def minimum_spanning_arborescence(
    G: Incomplete, attr: str = ..., default: int = ..., preserve_attrs: bool = ...
) -> Incomplete: ...
