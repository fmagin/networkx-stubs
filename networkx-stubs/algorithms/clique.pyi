from typing import TypeVar, Type
from collections.abc import Iterable

from networkx.classes.graph import Graph, Node

_G = TypeVar("_G")

def enumerate_all_cliques(G: Graph[Node]) -> Iterable[list[Node]]: ...
def find_cliques(G: Graph[Node], nodes: list[Node] | None = ...) -> Iterable[list[Node]]: ...
def find_cliques_recursive(G: Graph[Node], nodes: list[Node] | None = ...) -> Iterable[list[Node]]: ...
def make_max_clique_graph(G: Graph[Node], create_using: Type[_G] = Graph) -> _G: ...
def make_clique_bipartite(G: Graph[Node], fpos: None = ..., create_using: Type[_G] = Graph, name: None = ...) -> _G: ...
def graph_clique_number(G: Graph[Node], cliques: list[Node] | None = ...) -> int: ...
def graph_number_of_cliques(G: Graph[Node], cliques: list[Node] | None = ...) -> int: ...
def node_clique_number(G: Graph[Node], nodes: list[Node] | None = ..., cliques: list[list[Node]] | None = ...) -> int: ...
def number_of_cliques(G: Graph[Node], nodes: list[Node] | None = ..., cliques: list[list[Node]] | None = ...) -> int: ...
def cliques_containing_node(G: Graph[Node], nodes: list[Node] | None = ..., cliques: list[list[Node]] | None = ...) -> Iterable[list[Node]]: ...
