# Stubs for networkx.algorithms.dag (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, TypeVar

from networkx.classes.graph import Graph

_T = TypeVar("_T")

def descendants(G: Graph[_T], source: _T) -> set[_T]: ...
def ancestors(G: Graph[_T], source: _T) -> set[_T]: ...
def is_directed_acyclic_graph(G: Any) -> Incomplete: ...
def topological_sort(G: Any) -> None: ...
def lexicographical_topological_sort(G: Any, key: Any | None = ...) -> Incomplete: ...
def all_topological_sorts(G: Any) -> None: ...
def is_aperiodic(G: Any) -> Incomplete: ...
def transitive_closure(G: Any) -> Incomplete: ...
def transitive_reduction(G: Any) -> Incomplete: ...
def antichains(G: Any) -> None: ...
def dag_longest_path(G: Any, weight: str = ..., default_weight: int = ...) -> Incomplete: ...
def dag_longest_path_length(
    G: Any, weight: str = ..., default_weight: int = ...
) -> Incomplete: ...
def dag_to_branching(G: Any) -> Incomplete: ...
