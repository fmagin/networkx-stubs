# Stubs for networkx.algorithms.operators.binary (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, TypeVar, Union, overload

from networkx.classes.graph import Graph

from networkx.classes.digraph import DiGraph


def disjoint_union(G: Any, H: Any): ...
def intersection(G: Any, H: Any): ...
def difference(G: Any, H: Any): ...
def symmetric_difference(G: Any, H: Any): ...



_X = TypeVar('_X', covariant=True)
_Y = TypeVar('_Y', covariant=True)
#GT = TypeVar('GT', bound=Graph)
#TODO: This does not handle the cases when graphs of different types are passed which is allowed

def compose(G: DiGraph[_X], H: DiGraph[_Y]) -> DiGraph[Union[_X, _Y]]: ...


def union(G: DiGraph[_X], H: DiGraph[_Y], rename: Any = ..., name: Optional[Any] = ...) -> DiGraph[Union[_X, _Y]]: ...

