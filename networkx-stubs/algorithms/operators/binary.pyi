# Stubs for networkx.algorithms.operators.binary (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, TypeVar
from _typeshed import Incomplete

from networkx.classes.digraph import DiGraph

def disjoint_union(G: Any, H: Any) -> Incomplete: ...
def intersection(G: Any, H: Any) -> Incomplete: ...
def difference(G: Any, H: Any) -> Incomplete: ...
def symmetric_difference(G: Any, H: Any) -> Incomplete: ...

_X = TypeVar("_X", covariant=True)
_Y = TypeVar("_Y", covariant=True)
# GT = TypeVar('GT', bound=Graph)
# TODO: This does not handle the cases when graphs of different types are passed which is allowed

def compose(G: DiGraph[_X], H: DiGraph[_Y]) -> DiGraph[_X | _Y]: ...
def union(
    G: DiGraph[_X], H: DiGraph[_Y], rename: Any = ..., name: Any | None = ...
) -> DiGraph[_X | _Y]: ...
