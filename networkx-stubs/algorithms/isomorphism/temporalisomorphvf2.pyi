# Stubs for networkx.algorithms.isomorphism.temporalisomorphvf2 (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

from .isomorphvf2 import DiGraphMatcher, GraphMatcher

class TimeRespectingGraphMatcher(GraphMatcher):
    temporal_attribute_name: Incomplete = ...
    delta: Incomplete = ...
    def __init__(
        self,
        G1: Incomplete,
        G2: Incomplete,
        temporal_attribute_name: Incomplete,
        delta: Incomplete,
    ) -> None: ...
    def one_hop(
        self, Gx: Incomplete, Gx_node: Incomplete, neighbors: Incomplete
    ) -> Incomplete: ...
    def two_hop(
        self,
        Gx: Incomplete,
        core_x: Incomplete,
        Gx_node: Incomplete,
        neighbors: Incomplete,
    ) -> Incomplete: ...
    def semantic_feasibility(
        self, G1_node: Incomplete, G2_node: Incomplete
    ) -> Incomplete: ...

class TimeRespectingDiGraphMatcher(DiGraphMatcher):
    temporal_attribute_name: Incomplete = ...
    delta: Incomplete = ...
    def __init__(
        self,
        G1: Incomplete,
        G2: Incomplete,
        temporal_attribute_name: Incomplete,
        delta: Incomplete,
    ) -> None: ...
    def get_pred_dates(
        self, Gx: Incomplete, Gx_node: Incomplete, core_x: Incomplete, pred: Incomplete
    ) -> Incomplete: ...
    def get_succ_dates(
        self, Gx: Incomplete, Gx_node: Incomplete, core_x: Incomplete, succ: Incomplete
    ) -> Incomplete: ...
    def one_hop(
        self,
        Gx: Incomplete,
        Gx_node: Incomplete,
        core_x: Incomplete,
        pred: Incomplete,
        succ: Incomplete,
    ) -> Incomplete: ...
    def two_hop_pred(
        self, Gx: Incomplete, Gx_node: Incomplete, core_x: Incomplete, pred: Incomplete
    ) -> Incomplete: ...
    def two_hop_succ(
        self, Gx: Incomplete, Gx_node: Incomplete, core_x: Incomplete, succ: Incomplete
    ) -> Incomplete: ...
    def preds(
        self,
        Gx: Incomplete,
        core_x: Incomplete,
        v: Incomplete,
        Gx_node: Incomplete | None = ...,
    ) -> Incomplete: ...
    def succs(
        self,
        Gx: Incomplete,
        core_x: Incomplete,
        v: Incomplete,
        Gx_node: Incomplete | None = ...,
    ) -> Incomplete: ...
    def test_one(
        self, pred_dates: Incomplete, succ_dates: Incomplete
    ) -> Incomplete: ...
    def test_two(
        self, pred_dates: Incomplete, succ_dates: Incomplete
    ) -> Incomplete: ...
    def semantic_feasibility(
        self, G1_node: Incomplete, G2_node: Incomplete
    ) -> Incomplete: ...
