# Stubs for networkx.algorithms.centrality.flow_matrix (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def flow_matrix_row(
    G: Incomplete,
    weight: Incomplete | None = ...,
    dtype: Incomplete = ...,
    solver: str = ...,
) -> None: ...

class InverseLaplacian:
    dtype: Incomplete = ...
    n: Incomplete = ...
    w: Incomplete = ...
    C: Incomplete = ...
    L1: Incomplete = ...
    def __init__(
        self,
        L: Incomplete,
        width: Incomplete | None = ...,
        dtype: Incomplete | None = ...,
    ) -> None: ...
    def init_solver(self, L: Incomplete) -> None: ...
    def solve(self, r: Incomplete) -> None: ...
    def solve_inverse(self, r: Incomplete) -> None: ...
    def get_rows(self, r1: Incomplete, r2: Incomplete) -> Incomplete: ...
    def get_row(self, r: Incomplete) -> Incomplete: ...
    def width(self, L: Incomplete) -> Incomplete: ...

class FullInverseLaplacian(InverseLaplacian):
    IL: Incomplete = ...
    def init_solver(self, L: Incomplete) -> None: ...
    def solve(self, rhs: Incomplete) -> Incomplete: ...
    def solve_inverse(self, r: Incomplete) -> Incomplete: ...

class SuperLUInverseLaplacian(InverseLaplacian):
    lusolve: Incomplete = ...
    def init_solver(self, L: Incomplete) -> None: ...
    def solve_inverse(self, r: Incomplete) -> Incomplete: ...
    def solve(self, rhs: Incomplete) -> Incomplete: ...

class CGInverseLaplacian(InverseLaplacian):
    M: Incomplete = ...
    def init_solver(self, L: Incomplete) -> None: ...
    def solve(self, rhs: Incomplete) -> Incomplete: ...
    def solve_inverse(self, r: Incomplete) -> Incomplete: ...

def laplacian_sparse_matrix(
    G: Incomplete,
    nodelist: Incomplete | None = ...,
    weight: Incomplete | None = ...,
    dtype: Incomplete | None = ...,
    format: str = ...,
) -> Incomplete: ...
