# Stubs for networkx.algorithms.shortest_paths.weighted (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from _typeshed import Incomplete

def dijkstra_path(
    G: Incomplete, source: Incomplete, target: Incomplete, weight: str = ...
) -> Incomplete: ...
def dijkstra_path_length(
    G: Incomplete, source: Incomplete, target: Incomplete, weight: str = ...
) -> Incomplete: ...
def single_source_dijkstra_path(
    G: Incomplete,
    source: Incomplete,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def single_source_dijkstra_path_length(
    G: Incomplete,
    source: Incomplete,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def single_source_dijkstra(
    G: Incomplete,
    source: Incomplete,
    target: Incomplete | None = ...,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def multi_source_dijkstra_path(
    G: Incomplete,
    sources: Incomplete,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def multi_source_dijkstra_path_length(
    G: Incomplete,
    sources: Incomplete,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def multi_source_dijkstra(
    G: Incomplete,
    sources: Incomplete,
    target: Incomplete | None = ...,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def dijkstra_predecessor_and_distance(
    G: Incomplete,
    source: Incomplete,
    cutoff: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def all_pairs_dijkstra(
    G: Incomplete, cutoff: Incomplete | None = ..., weight: str = ...
) -> None: ...
def all_pairs_dijkstra_path_length(
    G: Incomplete, cutoff: Incomplete | None = ..., weight: str = ...
) -> None: ...
def all_pairs_dijkstra_path(
    G: Incomplete, cutoff: Incomplete | None = ..., weight: str = ...
) -> None: ...
def bellman_ford_predecessor_and_distance(
    G: Incomplete,
    source: Incomplete,
    target: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def bellman_ford_path(
    G: Incomplete, source: Incomplete, target: Incomplete, weight: str = ...
) -> Incomplete: ...
def bellman_ford_path_length(
    G: Incomplete, source: Incomplete, target: Incomplete, weight: str = ...
) -> Incomplete: ...
def single_source_bellman_ford_path(
    G: Incomplete, source: Incomplete, weight: str = ...
) -> Incomplete: ...
def single_source_bellman_ford_path_length(
    G: Incomplete, source: Incomplete, weight: str = ...
) -> Incomplete: ...
def single_source_bellman_ford(
    G: Incomplete,
    source: Incomplete,
    target: Incomplete | None = ...,
    weight: str = ...,
) -> Incomplete: ...
def all_pairs_bellman_ford_path_length(G: Incomplete, weight: str = ...) -> None: ...
def all_pairs_bellman_ford_path(G: Incomplete, weight: str = ...) -> None: ...
def goldberg_radzik(
    G: Incomplete, source: Incomplete, weight: str = ...
) -> Incomplete: ...
def negative_edge_cycle(G: Incomplete, weight: str = ...) -> Incomplete: ...
def bidirectional_dijkstra(
    G: Incomplete, source: Incomplete, target: Incomplete, weight: str = ...
) -> Incomplete: ...
def johnson(G: Incomplete, weight: str = ...) -> Incomplete: ...
