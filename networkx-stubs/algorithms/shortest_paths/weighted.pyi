# Stubs for networkx.algorithms.shortest_paths.weighted (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

def dijkstra_path(G: Any, source: Any, target: Any, weight: str = ...) -> Any: ...
def dijkstra_path_length(G: Any, source: Any, target: Any, weight: str = ...) -> Any: ...
def single_source_dijkstra_path(G: Any, source: Any, cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def single_source_dijkstra_path_length(G: Any, source: Any, cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def single_source_dijkstra(G: Any, source: Any, target: Any | None = ..., cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def multi_source_dijkstra_path(G: Any, sources: Any, cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def multi_source_dijkstra_path_length(G: Any, sources: Any, cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def multi_source_dijkstra(G: Any, sources: Any, target: Any | None = ..., cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def dijkstra_predecessor_and_distance(G: Any, source: Any, cutoff: Any | None = ..., weight: str = ...) -> Any: ...
def all_pairs_dijkstra(G: Any, cutoff: Any | None = ..., weight: str = ...) -> None: ...
def all_pairs_dijkstra_path_length(G: Any, cutoff: Any | None = ..., weight: str = ...) -> None: ...
def all_pairs_dijkstra_path(G: Any, cutoff: Any | None = ..., weight: str = ...) -> None: ...
def bellman_ford_predecessor_and_distance(G: Any, source: Any, target: Any | None = ..., weight: str = ...) -> Any: ...
def bellman_ford_path(G: Any, source: Any, target: Any, weight: str = ...) -> Any: ...
def bellman_ford_path_length(G: Any, source: Any, target: Any, weight: str = ...) -> Any: ...
def single_source_bellman_ford_path(G: Any, source: Any, weight: str = ...) -> Any: ...
def single_source_bellman_ford_path_length(G: Any, source: Any, weight: str = ...) -> Any: ...
def single_source_bellman_ford(G: Any, source: Any, target: Any | None = ..., weight: str = ...) -> Any: ...
def all_pairs_bellman_ford_path_length(G: Any, weight: str = ...) -> None: ...
def all_pairs_bellman_ford_path(G: Any, weight: str = ...) -> None: ...
def goldberg_radzik(G: Any, source: Any, weight: str = ...) -> Any: ...
def negative_edge_cycle(G: Any, weight: str = ...) -> Any: ...
def bidirectional_dijkstra(G: Any, source: Any, target: Any, weight: str = ...) -> Any: ...
def johnson(G: Any, weight: str = ...) -> Any: ...
